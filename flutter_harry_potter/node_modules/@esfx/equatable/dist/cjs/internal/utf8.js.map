{"version":3,"file":"utf8.js","sourceRoot":"","sources":["../../../src/internal/utf8.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\r\n   Copyright 2022 Ron Buckton\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\nconst hasTextEncoder = typeof TextEncoder === \"function\";\r\n\r\nlet utf8EncodeIntoCore: (source: string, buffer: Uint8Array) => number = (source, buffer) => (utf8EncodeIntoCore = createUtf8EncodeInto())(source, buffer);\r\n\r\nexport const utf8EncodeInto: (source: string, buffer: Uint8Array) => number = (source, buffer) => utf8EncodeIntoCore(source, buffer);\r\n\r\nfunction createUtf8EncodeInto() {\r\n    function getUtf8EncodeIntoUsingTextEncoder() {\r\n        const encoder = new TextEncoder();\r\n\r\n        function utf8EncodeInto(source: string, buffer: Uint8Array): number {\r\n            const { written = 0 } = encoder.encodeInto(source, buffer);\r\n            return written;\r\n        }\r\n\r\n        return utf8EncodeInto;\r\n    }\r\n\r\n    function getUtf8EncodeIntoFallback() {\r\n        function utf8EncodeInto(source: string, buffer: Uint8Array): number {\r\n            const length = source.length;\r\n            let written = 0;\r\n            for (let i = 0; i < length; i++) {\r\n                let ch = source.charCodeAt(i);\r\n                // decode surrogate pairs\r\n                if ((ch & 0xd800) !== 0 && (ch & 0xffff2400) === 0 && i < length - 1) {\r\n                    const ch2 = source.charCodeAt(i + 1);\r\n                    if ((ch2 & 0xfc00) === 0xdc00) {\r\n                        ch = ((ch & 0x3ff) << 10) + (ch2 & 0x3ff) + 0x10000;\r\n                        i++;\r\n                    }\r\n                }\r\n                if ((ch & 0xffffff80) === 0) {\r\n                    buffer[written++] = ch;\r\n                }\r\n                else if ((ch & 0xfffff800) === 0) {\r\n                    buffer[written++] = (ch >> 6) | 0xc0;\r\n                    buffer[written++] = (ch & 0x3f) | 0x80;\r\n                }\r\n                else if ((ch & 0xffff000) === 0) {\r\n                    buffer[written++] = (ch >> 12) | 0xe0;\r\n                    buffer[written++] = ((ch >> 6) & 0x3f) | 0x80;\r\n                    buffer[written++] = (ch & 0x3f) | 0x80;\r\n                }\r\n                else if ((ch & 0xffe00000) === 0) {\r\n                    buffer[written++] = (ch >> 18) | 0xf0;\r\n                    buffer[written++] = ((ch >> 12) & 0x3f) | 0x80;\r\n                    buffer[written++] = ((ch >> 6) & 0x3f) | 0x80;\r\n                    buffer[written++] = (ch & 0x3f) | 0x80;\r\n                }\r\n                else {\r\n                    throw new RangeError(\"Unsupported charCode.\");\r\n                }\r\n            }\r\n            return written;\r\n        }\r\n\r\n        return utf8EncodeInto;\r\n    }\r\n\r\n    return hasTextEncoder ? getUtf8EncodeIntoUsingTextEncoder() :\r\n        getUtf8EncodeIntoFallback();\r\n}\r\n"]}