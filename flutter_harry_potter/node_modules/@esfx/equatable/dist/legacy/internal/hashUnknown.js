"use strict";
/*!
   Copyright 2021 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashUnknown = void 0;
// Use subpath imports so that we can choose an appropriate hash implementation for each type based on the runtime.
const number_1 = require("./hashCode.js"); // prefers js. see package.json
const bigint_1 = require("../../../lib/hashCodeNative.js"); // prefers native > wasm > js. see package.json
const string_1 = require("../../../lib/hashCodeNative.js"); // prefers native > wasm > js. see package.json
const symbol_1 = require("../../../lib/hashCodeNative.js"); // prefers native > js. see package.json
const object_1 = require("../../../lib/hashCodeNative.js"); // prefers native > js. see package.json
const root = typeof globalThis === "object" ? globalThis :
    typeof global === "object" ? global :
        typeof self === "object" ? self :
            undefined;
const kHashUnknown = Symbol.for("@esfx/equatable!~hashUnknown");
let hashUnknownCore;
if (root && typeof root[kHashUnknown] === "function") {
    hashUnknownCore = root[kHashUnknown];
}
else {
    hashUnknownCore = function hashUnknown(x) {
        switch (typeof x) {
            case "boolean": return x ? 1 : 0;
            case "number": return (0, number_1.hashNumber)(x);
            case "bigint": return (0, bigint_1.hashBigInt)(x);
            case "string": return (0, string_1.hashString)(x);
            case "symbol": return (0, symbol_1.hashSymbol)(x);
            case "function": return (0, object_1.hashObject)(x);
            case "object": return x === null ? 0 : (0, object_1.hashObject)(x);
            case "undefined": return 0;
            default: throw new TypeError(`Unsupported type: ${typeof x}`);
        }
    };
    Object.defineProperty(root, kHashUnknown, { value: hashUnknownCore });
}
function hashUnknown(x) {
    return hashUnknownCore(x);
}
exports.hashUnknown = hashUnknown;
