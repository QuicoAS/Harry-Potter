"use strict";
/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashMap = void 0;
const collection_core_1 = require("@esfx/collection-core");
const equatable_1 = require("@esfx/equatable");
const internal_collections_hash_1 = function () {
    var module = { exports: {} };
    (function (module, exports, require) {
        /*! The following comments were added due to code inlined from "@esfx/internal-collections-hash": */
        /*!
           Copyright 2019 Ron Buckton
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
           THIRD PARTY LICENSE NOTICE:
        
           HashMap is derived from the implementation of Dictionary<T> in .NET Core.
           HashSet is derived from the implementation of HashSet<T> in .NET Core.
           "getPrime", "expandPrime", and "isPrime" are derived from the implementation
           of "HashHelpers" in .NET Core.
        
           .NET Core is licensed under the MIT License:
        
           The MIT License (MIT)
        
           Copyright (c) .NET Foundation and Contributors
        
           All rights reserved.
        
           Permission is hereby granted, free of charge, to any person obtaining a copy
           of this software and associated documentation files (the "Software"), to deal
           in the Software without restriction, including without limitation the rights
           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
           copies of the Software, and to permit persons to whom the Software is
           furnished to do so, subject to the following conditions:
        
           The above copyright notice and this permission notice shall be included in all
           copies or substantial portions of the Software.
        
           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
           SOFTWARE.
        */
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const MAX_INT32 = (2 ** 31) - 1;
        const maxPrimeArrayLength = 2146435069;
        const hashPrime = 101;
        const primes = [
            3,
            7,
            11,
            17,
            23,
            29,
            37,
            47,
            59,
            71,
            89,
            107,
            131,
            163,
            197,
            239,
            293,
            353,
            431,
            521,
            631,
            761,
            919,
            1103,
            1327,
            1597,
            1931,
            2333,
            2801,
            3371,
            4049,
            4861,
            5839,
            7013,
            8419,
            10103,
            12143,
            14591,
            17519,
            21023,
            25229,
            30293,
            36353,
            43627,
            52361,
            62851,
            75431,
            90523,
            108631,
            130363,
            156437,
            187751,
            225307,
            270371,
            324449,
            389357,
            467237,
            560689,
            672827,
            807403,
            968897,
            1162687,
            1395263,
            1674319,
            2009191,
            2411033,
            2893249,
            3471899,
            4166287,
            4999559,
            5999471,
            7199369
        ];
        function isPrime(candidate) {
            if (candidate & 1) {
                const limit = Math.sqrt(candidate) | 0;
                for (let divisor = 3; divisor <= limit; divisor += 2) {
                    if (!(candidate % divisor))
                        return false;
                }
                return true;
            }
            return candidate === 2;
        }
        function getPrime(min) {
            if (min < 0)
                throw new RangeError();
            for (let i = 0; i < primes.length; i++) {
                const prime = primes[i];
                if (prime >= min)
                    return prime;
            }
            for (let i = min | 1; i < MAX_INT32; i += 2) {
                if (isPrime(i) && (i - 1) % hashPrime) {
                    return i;
                }
            }
            return min;
        }
        function expandPrime(oldSize) {
            const newSize = 2 * oldSize;
            if (newSize > maxPrimeArrayLength && maxPrimeArrayLength > oldSize) {
                return maxPrimeArrayLength;
            }
            return getPrime(newSize);
        }
        function createHashEntry() {
            return {
                prevEntry: undefined,
                nextEntry: undefined,
                skipNextEntry: false,
                next: 0,
                hashCode: 0,
                key: undefined,
                value: undefined
            };
        }
        function createHashData(equaler, capacity) {
            const head = createHashEntry();
            const hashData = {
                buckets: undefined,
                entries: undefined,
                freeSize: 0,
                freeList: 0,
                size: 0,
                equaler,
                head,
                tail: head
            };
            initializeHashData(hashData, capacity);
            return hashData;
        }
        exports.createHashData = createHashData;
        function initializeHashData(hashData, capacity) {
            const newCapacity = getPrime(capacity);
            hashData.freeList = -1;
            hashData.buckets = new Int32Array(newCapacity);
            hashData.entries = new Array(newCapacity);
            return newCapacity;
        }
        function resizeHashData(hashData, newSize) {
            const size = hashData.size;
            const buckets = new Int32Array(newSize);
            const entries = hashData.entries ? hashData.entries.slice() : [];
            entries.length = newSize;
            for (let i = 0; i < size; i++) {
                const entry = entries[i];
                if (entry && entry.hashCode >= 0) {
                    const bucket = entry.hashCode % newSize;
                    entry.next = buckets[bucket] - 1;
                    buckets[bucket] = i + 1;
                }
            }
            hashData.buckets = buckets;
            hashData.entries = entries;
        }
        function findEntryIndex(hashData, key) {
            let i = -1;
            if (hashData.buckets && hashData.entries) {
                let hashCode = hashData.equaler.hash(key) & MAX_INT32;
                i = hashData.buckets[hashCode % hashData.buckets.length] - 1;
                const length = hashData.entries.length;
                while ((i >>> 0) < length) {
                    const entry = hashData.entries[i];
                    if (entry.hashCode === hashCode && hashData.equaler.equals(entry.key, key)) {
                        break;
                    }
                    i = entry.next;
                }
            }
            return i;
        }
        exports.findEntryIndex = findEntryIndex;
        function findEntryValue(hashData, key) {
            const index = findEntryIndex(hashData, key);
            return index >= 0 ? hashData.entries[index].value : undefined;
        }
        exports.findEntryValue = findEntryValue;
        function insertEntry(hashData, key, value) {
            if (!hashData.buckets)
                initializeHashData(hashData, 0);
            if (!hashData.buckets || !hashData.entries)
                throw new Error();
            const hashCode = hashData.equaler.hash(key) & MAX_INT32;
            let bucket = hashCode % hashData.buckets.length;
            let i = hashData.buckets[bucket] - 1;
            while ((i >>> 0) < hashData.entries.length) {
                const entry = hashData.entries[i];
                if (entry.hashCode === hashCode && hashData.equaler.equals(entry.key, key)) {
                    entry.value = value;
                    return;
                }
                i = entry.next;
            }
            let updateFreeList = false;
            let index;
            if (hashData.freeSize > 0) {
                index = hashData.freeList;
                updateFreeList = true;
                hashData.freeSize--;
            }
            else {
                const size = hashData.size;
                if (size === hashData.entries.length) {
                    resizeHashData(hashData, expandPrime(hashData.size));
                    if (!hashData.buckets || !hashData.entries)
                        throw new Error();
                    bucket = hashCode % hashData.buckets.length;
                }
                index = size;
                hashData.size = size + 1;
            }
            const entry = hashData.entries[index] || (hashData.entries[index] = createHashEntry());
            if (updateFreeList)
                hashData.freeList = entry.next;
            entry.hashCode = hashCode;
            entry.next = hashData.buckets[bucket] - 1;
            entry.key = key;
            entry.value = value;
            entry.skipNextEntry = false;
            const tail = hashData.tail;
            tail.nextEntry = entry;
            entry.prevEntry = tail;
            hashData.tail = entry;
            hashData.buckets[bucket] = index + 1;
        }
        exports.insertEntry = insertEntry;
        function deleteEntry(hashData, key) {
            if (hashData.buckets && hashData.entries) {
                const hashCode = hashData.equaler.hash(key) & MAX_INT32;
                const bucket = hashCode % hashData.buckets.length;
                let last = -1;
                let entry;
                for (let i = hashData.buckets[bucket] - 1; i >= 0; i = entry.next) {
                    entry = hashData.entries[i];
                    if (entry.hashCode === hashCode && hashData.equaler.equals(entry.key, key)) {
                        if (last < 0) {
                            hashData.buckets[bucket] = entry.next + 1;
                        }
                        else {
                            hashData.entries[last].next = entry.next;
                        }
                        const prevEntry = entry.prevEntry;
                        prevEntry.nextEntry = entry.nextEntry;
                        if (prevEntry.nextEntry) {
                            prevEntry.nextEntry.prevEntry = prevEntry;
                        }
                        if (hashData.tail === entry) {
                            hashData.tail = prevEntry;
                        }
                        entry.hashCode = -1;
                        entry.next = hashData.freeList;
                        entry.key = undefined;
                        entry.value = undefined;
                        entry.prevEntry = undefined;
                        entry.nextEntry = prevEntry;
                        entry.skipNextEntry = true;
                        hashData.freeList = i;
                        hashData.freeSize++;
                        return true;
                    }
                    last = i;
                }
            }
            return false;
        }
        exports.deleteEntry = deleteEntry;
        function clearEntries(hashData) {
            const size = hashData.size;
            if (size > 0) {
                if (hashData.buckets)
                    hashData.buckets.fill(0);
                if (hashData.entries)
                    hashData.entries.fill(undefined);
                let currentEntry = hashData.head.nextEntry;
                while (currentEntry) {
                    const nextEntry = currentEntry.nextEntry;
                    currentEntry.prevEntry = undefined;
                    currentEntry.nextEntry = hashData.head;
                    currentEntry.skipNextEntry = true;
                    currentEntry = nextEntry;
                }
                hashData.head.nextEntry = undefined;
                hashData.tail = hashData.head;
                hashData.size = 0;
                hashData.freeList = -1;
                hashData.freeSize = 0;
            }
        }
        exports.clearEntries = clearEntries;
        function ensureCapacity(hashData, capacity) {
            if (capacity < 0)
                throw new RangeError();
            const existingCapacity = hashData.entries ? hashData.entries.length : 0;
            if (existingCapacity >= capacity)
                return existingCapacity;
            if (!hashData.buckets) {
                return initializeHashData(hashData, capacity);
            }
            const newCapacity = getPrime(capacity);
            resizeHashData(hashData, getPrime(capacity));
            return newCapacity;
        }
        exports.ensureCapacity = ensureCapacity;
        function trimExcessEntries(hashData, capacity = hashData.size - hashData.freeSize) {
            if (capacity < hashData.size)
                throw new RangeError();
            if (!hashData.buckets || !hashData.entries)
                return;
            const newCapacity = getPrime(capacity);
            const existingEntries = hashData.entries;
            if (newCapacity >= (existingEntries ? existingEntries.length : 0))
                return;
            const oldSize = hashData.size;
            initializeHashData(hashData, newCapacity);
            if (!hashData.buckets || !hashData.entries)
                throw new Error();
            let newSize = 0;
            for (let i = 0; i < oldSize; i++) {
                const hashCode = existingEntries[i].hashCode;
                if (hashCode >= 0) {
                    const bucket = hashCode % newCapacity;
                    hashData.entries[newSize] = existingEntries[i];
                    hashData.entries[newSize].next = hashData.buckets[bucket] - 1;
                    hashData.buckets[bucket] = newSize + 1;
                    newSize++;
                }
            }
            hashData.size = newSize;
            hashData.freeSize = 0;
        }
        exports.trimExcessEntries = trimExcessEntries;
        function selectEntryKey(entry) {
            return entry.key;
        }
        exports.selectEntryKey = selectEntryKey;
        function selectEntryValue(entry) {
            return entry.value;
        }
        exports.selectEntryValue = selectEntryValue;
        function selectEntryEntry(entry) {
            return [entry.key, entry.value];
        }
        exports.selectEntryEntry = selectEntryEntry;
        function* iterateEntries(head, selector) {
            let currentEntry = head;
            while (currentEntry) {
                const skipNextEntry = currentEntry.skipNextEntry;
                currentEntry = currentEntry.nextEntry;
                if (skipNextEntry)
                    continue;
                if (currentEntry)
                    yield selector(currentEntry);
            }
        }
        exports.iterateEntries = iterateEntries;
        function forEachEntry(source, head, callback, thisArg) {
            let currentEntry = head;
            while (currentEntry) {
                const skipNextEntry = currentEntry.skipNextEntry;
                currentEntry = currentEntry.nextEntry;
                if (skipNextEntry)
                    continue;
                if (currentEntry)
                    callback.call(thisArg, currentEntry.value, currentEntry.key, source);
            }
        }
        exports.forEachEntry = forEachEntry;
    })(module, module.exports, null);
    return module.exports;
}();
class HashMap {
    constructor(...args) {
        let capacity;
        let iterable;
        let equaler;
        if (args.length > 0) {
            const arg0 = args[0];
            if (typeof arg0 === "number") {
                if (!(Object.is(arg0, arg0 | 0) && arg0 >= 0))
                    throw new RangeError("Argument out of range: capacity");
                capacity = arg0;
                if (args.length > 1)
                    equaler = args[1];
            }
            else if (arg0 === undefined || arg0 !== undefined && arg0 !== null && Symbol.iterator in Object(arg0)) {
                iterable = arg0;
                if (args.length > 1)
                    equaler = args[1];
            }
            else {
                equaler = arg0;
            }
        }
        capacity !== null && capacity !== void 0 ? capacity : (capacity = 0);
        equaler !== null && equaler !== void 0 ? equaler : (equaler = equatable_1.Equaler.defaultEqualer);
        this._hashData = (0, internal_collections_hash_1.createHashData)(equaler, capacity);
        if (iterable) {
            for (const [key, value] of iterable) {
                this.set(key, value);
            }
        }
    }
    get equaler() {
        return this._hashData.equaler;
    }
    get size() {
        return this._hashData.size - this._hashData.freeSize;
    }
    has(key) {
        return (0, internal_collections_hash_1.findEntryIndex)(this._hashData, key) >= 0;
    }
    get(key) {
        return (0, internal_collections_hash_1.findEntryValue)(this._hashData, key);
    }
    set(key, value) {
        (0, internal_collections_hash_1.insertEntry)(this._hashData, key, value);
        return this;
    }
    delete(key) {
        return (0, internal_collections_hash_1.deleteEntry)(this._hashData, key);
    }
    clear() {
        (0, internal_collections_hash_1.clearEntries)(this._hashData);
    }
    ensureCapacity(capacity) {
        if (!(typeof capacity === "number"))
            throw new TypeError("Number expected: capacity");
        if (!(Object.is(capacity, capacity | 0) && capacity >= 0))
            throw new RangeError("Argument out of range: capacity");
        return (0, internal_collections_hash_1.ensureCapacity)(this._hashData, capacity);
    }
    trimExcess(capacity) {
        if (!(capacity === undefined)) {
            if (!(typeof capacity === "number"))
                throw new TypeError("Number expected: capacity");
            if (!(Object.is(capacity, capacity | 0) && capacity >= 0))
                throw new RangeError("Argument out of range: capacity");
        }
        (0, internal_collections_hash_1.trimExcessEntries)(this._hashData, capacity);
    }
    keys() {
        return (0, internal_collections_hash_1.iterateEntries)(this._hashData.head, internal_collections_hash_1.selectEntryKey);
    }
    values() {
        return (0, internal_collections_hash_1.iterateEntries)(this._hashData.head, internal_collections_hash_1.selectEntryValue);
    }
    entries() {
        return (0, internal_collections_hash_1.iterateEntries)(this._hashData.head, internal_collections_hash_1.selectEntryEntry);
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    forEach(callback, thisArg) {
        if (!(typeof callback === "function"))
            throw new TypeError("Function expected: callback");
        (0, internal_collections_hash_1.forEachEntry)(this, this._hashData.head, callback, thisArg);
    }
    get [collection_core_1.ReadonlyKeyedCollection.size]() { return this.size; }
    [collection_core_1.ReadonlyKeyedCollection.has](key) { return this.has(key); }
    [collection_core_1.ReadonlyKeyedCollection.get](key) { return this.get(key); }
    [collection_core_1.ReadonlyKeyedCollection.keys]() { return this.keys(); }
    [collection_core_1.ReadonlyKeyedCollection.values]() { return this.values(); }
    [collection_core_1.KeyedCollection.set](key, value) { this.set(key, value); }
    [collection_core_1.KeyedCollection.delete](key) { return this.delete(key); }
    [collection_core_1.KeyedCollection.clear]() { this.clear(); }
}
exports.HashMap = HashMap;
_a = HashMap;
(() => {
    Object.defineProperty(_a.prototype, Symbol.toStringTag, { configurable: true, writable: true, value: "HashMap" });
})();
//# sourceMappingURL=index.js.map