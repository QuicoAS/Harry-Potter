/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var _a;
const internal_binarysearch_1 = function () {
    var module = { exports: {} };
    (function (module, exports, require) {
        /*! The following comments were added due to code inlined from "@esfx/internal-binarysearch": */
        /*!
           Copyright 2019 Ron Buckton
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        */
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        function binarySearch(array, key, comparer) {
            if (array.length === 0)
                return -1;
            let low = 0;
            let high = array.length - 1;
            while (low <= high) {
                const middle = low + ((high - low) >> 1);
                const midKey = array[middle];
                switch (Math.sign(comparer.compare(midKey, key))) {
                    case -1:
                        low = middle + 1;
                        break;
                    case 0: return middle;
                    case +1:
                        high = middle - 1;
                        break;
                }
            }
            return ~low;
        }
        exports.binarySearch = binarySearch;
    })(module, module.exports, null);
    return module.exports;
}();
import * as collection_core_1 from "@esfx/collection-core";
import * as equatable_1 from "@esfx/equatable";
export class SortedMap {
    constructor(...args) {
        this._keys = [];
        this._values = [];
        let iterable;
        let comparer;
        if (args.length > 0) {
            const arg0 = args[0];
            if (arg0 === undefined || arg0 !== undefined && arg0 !== null && Symbol.iterator in Object(arg0)) {
                iterable = arg0;
                if (args.length > 1)
                    comparer = args[1];
            }
            else {
                comparer = arg0;
            }
        }
        comparer !== null && comparer !== void 0 ? comparer : (comparer = equatable_1.Comparer.defaultComparer);
        this._comparer = typeof comparer === "function" ? equatable_1.Comparer.create(comparer) : comparer;
        if (iterable) {
            for (const [key, value] of iterable) {
                this.set(key, value);
            }
        }
    }
    get comparer() {
        return this._comparer;
    }
    get size() {
        return this._keys.length;
    }
    has(key) {
        return (0, internal_binarysearch_1.binarySearch)(this._keys, key, this._comparer) >= 0;
    }
    get(key) {
        const index = (0, internal_binarysearch_1.binarySearch)(this._keys, key, this._comparer);
        return index >= 0 ? this._values[index] : undefined;
    }
    set(key, value) {
        const index = (0, internal_binarysearch_1.binarySearch)(this._keys, key, this._comparer);
        if (index >= 0) {
            this._values[index] = value;
        }
        else {
            this._keys.splice(~index, 0, key);
            this._values.splice(~index, 0, value);
        }
        return this;
    }
    delete(key) {
        const index = (0, internal_binarysearch_1.binarySearch)(this._keys, key, this._comparer);
        if (index >= 0) {
            this._keys.splice(index, 1);
            this._values.splice(index, 1);
            return true;
        }
        return false;
    }
    clear() {
        this._keys.length = 0;
        this._values.length = 0;
    }
    keys() {
        return this._keys.values();
    }
    values() {
        return this._values.values();
    }
    *entries() {
        for (let i = 0; i < this._keys.length; i++) {
            yield [this._keys[i], this._values[i]];
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    forEach(callback, thisArg) {
        if (!(typeof callback === "function"))
            throw new TypeError("Function expected: callback");
        for (const [key, value] of this) {
            callback.call(thisArg, value, key, this);
        }
    }
    get [collection_core_1.KeyedCollection.size]() { return this.size; }
    [collection_core_1.KeyedCollection.has](key) { return this.has(key); }
    [collection_core_1.KeyedCollection.get](key) { return this.get(key); }
    [collection_core_1.KeyedCollection.set](key, value) { this.set(key, value); }
    [collection_core_1.KeyedCollection.delete](key) { return this.delete(key); }
    [collection_core_1.KeyedCollection.clear]() { this.clear(); }
    [collection_core_1.KeyedCollection.keys]() { return this.keys(); }
    [collection_core_1.KeyedCollection.values]() { return this.values(); }
}
_a = SortedMap;
(() => {
    Object.defineProperty(_a.prototype, Symbol.toStringTag, { configurable: true, writable: true, value: "SortedMap" });
})();
