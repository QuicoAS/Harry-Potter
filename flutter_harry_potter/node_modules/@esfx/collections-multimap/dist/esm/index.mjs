/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
var _a;
import * as equatable_1 from "@esfx/equatable";
import * as collection_core_1 from "@esfx/collection-core";
import * as collections_hashmap_1 from "@esfx/collections-hashmap";
import * as collections_hashset_1 from "@esfx/collections-hashset";
export class MultiMap {
    constructor(...args) {
        var _b, _c;
        this._size = 0;
        let capacity;
        let iterable;
        let options;
        if (isCapacityKeyEqualerValueEqualerOverload(args)) {
            [capacity, options = {}] = args;
        }
        else {
            capacity = 0;
            if (isIterableKeyEqualerValueEqualerOverload(args)) {
                [iterable, options = {}] = args;
            }
            else {
                options = {};
            }
        }
        const keyEqualer = (_b = options === null || options === void 0 ? void 0 : options.keyEqualer) !== null && _b !== void 0 ? _b : equatable_1.Equaler.defaultEqualer;
        const valueEqualer = (_c = options === null || options === void 0 ? void 0 : options.valueEqualer) !== null && _c !== void 0 ? _c : equatable_1.Equaler.defaultEqualer;
        this._map = new collections_hashmap_1.HashMap(capacity, keyEqualer);
        this._keyEqualer = keyEqualer;
        this._valueEqualer = valueEqualer;
        if (iterable) {
            for (const [key, value] of iterable) {
                this.add(key, value);
            }
        }
    }
    get keyEqualer() {
        return this._keyEqualer;
    }
    get valueEqualer() {
        return this._valueEqualer;
    }
    get size() {
        return this._size;
    }
    has(key) {
        return this._map.has(key);
    }
    hasValue(key, value) {
        const values = this._map.get(key);
        if (values) {
            return values.has(value);
        }
        return false;
    }
    get(key) {
        return this._map.get(key);
    }
    add(key, value) {
        let values = this._map.get(key);
        if (!values) {
            values = new collections_hashset_1.HashSet(this._valueEqualer);
            this._map.set(key, values);
        }
        const size = values.size;
        values.add(value);
        this._size += values.size - size;
        return this;
    }
    delete(key) {
        const values = this._map.get(key);
        if (values) {
            this._size -= values.size;
            this._map.delete(key);
            return values.size;
        }
        return 0;
    }
    deleteValue(key, value) {
        const values = this._map.get(key);
        if (values) {
            const size = values.size;
            if (values.delete(value)) {
                this._size += values.size - size;
                if (values.size <= 0) {
                    this._map.delete(key);
                }
                return true;
            }
        }
        return false;
    }
    clear() {
        this._map.clear();
        this._size = 0;
    }
    ensureCapacity(capacity) {
        return this._map.ensureCapacity(capacity);
    }
    trimExcess(capacity) {
        this._map.trimExcess(capacity);
    }
    keys() {
        return this._map.keys();
    }
    *values() {
        for (const values of this._map.values()) {
            yield* values;
        }
    }
    *entries() {
        for (const [key, values] of this._map) {
            for (const value of values) {
                yield [key, value];
            }
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    forEach(callback, thisArg) {
        if (!(typeof callback === "function"))
            throw new TypeError("Function expected: callback");
        for (const [key, values] of this._map) {
            for (const value of values) {
                callback.call(thisArg, value, key, this);
            }
        }
    }
    // #region ReadonlyKeyedMultiCollection
    get [collection_core_1.ReadonlyKeyedMultiCollection.size]() { return this.size; }
    [collection_core_1.ReadonlyKeyedMultiCollection.has](key) { return this.has(key); }
    [collection_core_1.ReadonlyKeyedMultiCollection.hasValue](key, value) { return this.hasValue(key, value); }
    [collection_core_1.ReadonlyKeyedMultiCollection.get](key) { return this.get(key); }
    [collection_core_1.ReadonlyKeyedMultiCollection.keys]() { return this.keys(); }
    [collection_core_1.ReadonlyKeyedMultiCollection.values]() { return this.values(); }
    // #endregion ReadonlyKeyedMultiCollection
    // #region KeyedMultiCollection
    [collection_core_1.KeyedMultiCollection.add](key, value) { this.add(key, value); }
    [collection_core_1.KeyedMultiCollection.delete](key) { return this.delete(key); }
    [collection_core_1.KeyedMultiCollection.deleteValue](key, value) { return this.deleteValue(key, value); }
    [collection_core_1.KeyedMultiCollection.clear]() { this.clear(); }
}
_a = MultiMap;
(() => {
    Object.defineProperty(_a.prototype, Symbol.toStringTag, { configurable: true, writable: true, value: "MultiMap" });
})();
function isIterableKeyEqualerValueEqualerOverload(args) {
    const [arg0, arg1] = args;
    return (arg0 === undefined || arg0 !== undefined && arg0 !== null && Symbol.iterator in Object(arg0))
        && (arg1 === undefined || (typeof arg1 === "object" && arg1 !== null || typeof arg1 === "function"));
}
function isCapacityKeyEqualerValueEqualerOverload(args) {
    const [arg0, arg1] = args;
    return typeof arg0 === "number" && (arg1 === undefined || (typeof arg1 === "object" && arg1 !== null || typeof arg1 === "function"));
}
