/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
import { Equaler } from "@esfx/equatable";
import { KeyedMultiCollection, ReadonlyKeyedMultiCollection } from "@esfx/collection-core";
import { ReadonlyHashSet } from "@esfx/collections-hashset";
export interface MultiMapOptions<K, V> {
    keyEqualer?: Equaler<K>;
    valueEqualer?: Equaler<V>;
}
export declare class MultiMap<K, V> implements KeyedMultiCollection<K, V> {
    private _map;
    private _keyEqualer;
    private _valueEqualer;
    private _size;
    constructor(options?: MultiMapOptions<K, V>);
    constructor(iterable?: Iterable<[K, V]>, options?: MultiMapOptions<K, V>);
    constructor(capacity: number, options?: MultiMapOptions<K, V>);
    get keyEqualer(): Equaler<K>;
    get valueEqualer(): Equaler<V>;
    get size(): number;
    has(key: K): boolean;
    hasValue(key: K, value: V): boolean;
    get(key: K): ReadonlyHashSet<V> | undefined;
    add(key: K, value: V): this;
    delete(key: K): number;
    deleteValue(key: K, value: V): boolean;
    clear(): void;
    ensureCapacity(capacity: number): number;
    trimExcess(capacity?: number): void;
    keys(): Generator<K, void, unknown>;
    values(): Generator<V, void, unknown>;
    entries(): Generator<[K, V], void, unknown>;
    [Symbol.iterator](): Generator<[K, V], void, unknown>;
    forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void;
    [Symbol.toStringTag]: string;
    get [ReadonlyKeyedMultiCollection.size](): number;
    [ReadonlyKeyedMultiCollection.has](key: K): boolean;
    [ReadonlyKeyedMultiCollection.hasValue](key: K, value: V): boolean;
    [ReadonlyKeyedMultiCollection.get](key: K): ReadonlyHashSet<V> | undefined;
    [ReadonlyKeyedMultiCollection.keys](): Generator<K, void, unknown>;
    [ReadonlyKeyedMultiCollection.values](): Generator<V, void, unknown>;
    [KeyedMultiCollection.add](key: K, value: V): void;
    [KeyedMultiCollection.delete](key: K): number;
    [KeyedMultiCollection.deleteValue](key: K, value: V): boolean;
    [KeyedMultiCollection.clear](): void;
}
export interface ReadonlyMultiMap<K, V> extends KeyedMultiCollection<K, V> {
    readonly keyEqualer: Equaler<K>;
    readonly valueEqualer: Equaler<V>;
    readonly size: number;
    has(key: K, value: V): boolean;
    hasKey(key: K): boolean;
    get(key: K): ReadonlyHashSet<V> | undefined;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[K, V]>;
    forEach(callback: (value: V, key: K, map: this) => void, thisArg?: any): void;
}
//# sourceMappingURL=index.d.ts.map